import { useRserve } from "@tmelliott/react-rserve";
import { useEffect, useState } from "react";

export const createPromise = (fn: any) => {
  return (...args: any) => {
    return new Promise((resolve, reject) => {
      fn(...args, (err: string, data: any) => {
        if (err) return reject(err);
        resolve(data);
      });
    });
  };
};

// generated by R package:
export type Transform = (
  x: number,
  fun: "log" | "square" | "inverse"
) => Promise<number>;
export type CalculateSummary = (x: number[]) => Promise<{
  mean: number;
  stdDev: number;
}>;
export type GuessType = (x: number | string | boolean) => Promise<string>;

export type RMethods = {
  transform: Transform;
  calculateSummary: CalculateSummary;
  guessType: GuessType;
};

export type Rserve = {
  ocap: () => any;
};

export const useR = () => {
  const con = useRserve();
  const [R, setR] = useState<RMethods | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!con || !con.R || con.R.connecting) return;
    console.log("Connection capabilities: ", con.R.ocap);
    con.R.ocap((err: string, funs: any) => {
      console.log("Fetching capabilities .....");
      console.log(err);
      console.log(funs);
      //   console.log(funs);
      //   setR({
      //     transform: (...args) => {
      //       return new Promise((resolve, reject) => {
      //         funs.transform((err: string, data: number) => {
      //           if (err) return reject(err);
      //           resolve(data);
      //         });
      //       });
      //     },
      //     calculateSummary: (...args) => {
      //       return new Promise((resolve, reject) => {
      //         funs.calculateSummary(
      //           (
      //             err: string,
      //             data: {
      //               mean: number;
      //               stdDev: number;
      //             }
      //           ) => {
      //             if (err) return reject(err);
      //             resolve(data);
      //           }
      //         );
      //       });
      //     },
      //     guessType: (...args) => {
      //       return new Promise((resolve, reject) => {
      //         funs.guessType((err: string, data: string) => {
      //           if (err) return reject(err);
      //           resolve(data);
      //         });
      //       });
      //     },
      //   });
    });
  }, [con]);

  return { R, loading, error };
};
